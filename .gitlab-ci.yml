# SPDX-FileCopyrightText: 2023 German Aerospace Center (DLR)
#
# SPDX-License-Identifier: MPL-2.0+

########################################################
###########GTlab Pipeline Version 2.0.0 ###########
########################################################
# This is a slight changed version and 
# --> the nightly copy stage is currently missing
# --> contains a guiTests step
# --> executes copyBin.bat in copyForDeploymentWin and
#     copyForDeploymentLinux

# Environment variables to use in the pipeline globally
variables:
  PIPELINEVERSION: "2.0.0-unstable"
  GIT_SUBMODULE_STRATEGY: "recursive"
  GIT_STRATEGY: "clone"
  
  # overriding the global config for now in this branch
  QT_DIR_LINUX:  "/opt/Qt/5.15.2/gcc_64/"
  QT_DIR_LINUX2: "/opt/Qt/5.15.2/gcc_64/"

# inlcude some templates from this file
include:
  - project: 'at-twk/gitlab-templates'
    file: '/ci-templates/.ci-templates-cmake-1.0.yml'

   
stages:
  - update
  - build
  - test
  - package
  - guiTestStable
  - guiTestUnstable
  - regressionTest
  - copy
  - codequality
  - badges

# Templates
.debugBuildRules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TAG == null
    - if: $CI_COMMIT_TAG =~ /^[1-9][0-9]*-[0-9]+-[0-9]+$/ # stable tag
    - if: $CI_COMMIT_TAG =~ /^[1-9][0-9]*-[0-9]+-[0-9]+-.*$/ # unstable tag

.releaseBuildRules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_BRANCH == "master" # -master
    - if: $CI_COMMIT_TAG =~ /^[1-9][0-9]*-[0-9]+-[0-9]+$/ # stable tag
    - if: $CI_COMMIT_TAG =~ /^[1-9][0-9]*-[0-9]+-[0-9]+-.*$/ # unstable tag


# build on Windows system
windowsBuildDebug:
  stage: build
  extends: 
    - .build-win_20
    - .debugBuildRules
  script:
    - $env:PATH+=(";.\build;"+$env:GTLAB_DEV_TOOLS+"\binDebug;"+$env:GTLAB_DEV_TOOLS+"\binDebug\modules;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DGTLAB_DEVTOOLS_DIR="$env:GTLAB_DEV_TOOLS" -DCMAKE_INSTALL_PREFIX=install-msvc2019-dbg -DBUILD_UNITTESTS=ON -DBUILD_TESTMODULES=ON
    - cmake --build build --target install
  artifacts:
    paths:
      - install*
      - build/**/*.dll
      - build/**/*.exe
      - build/**/*.lib
      - build/**/*.pdb
      - build/modules
      - build/**/*.txt
      - build/**/*.cmake
      - build/**/*.ninja
      - build/**/*.log
      - build/_deps/*-src

windowsBuildRelease:
  stage: build
  extends: 
    - .build-win_20
    - .releaseBuildRules
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DGTLAB_DEVTOOLS_DIR="$env:GTLAB_DEV_TOOLS" -DCMAKE_INSTALL_PREFIX=install-msvc2019
    - cmake --build build --target install
  artifacts:
    paths:
      - install*


# Linux build
linuxBuildDebug:
  stage: build
  extends: 
    - .build-linux_20
    - .debugBuildRules
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DGTLAB_DEVTOOLS_DIR=$GTLAB_DEV_TOOLS -DCMAKE_INSTALL_PREFIX=install-linux-dbg -DBUILD_UNITTESTS=ON -DBUILD_WITH_COVERAGE=ON -DBUILD_TESTMODULES=ON
    - cmake --build build --target install
  artifacts:
    paths:
      - install*
      - build/*.so*
      - build/GTlab*
      - build/modules
      - build/**/*.txt
      - build/**/*.cmake
      - build/**/*.ninja
      - build/**/*.log
      - build/_deps/*-src

linuxBuildRelease:
  stage: build
  extends: 
    - .build-linux_20
    - .releaseBuildRules
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DGTLAB_DEVTOOLS_DIR=$GTLAB_DEV_TOOLS -DCMAKE_INSTALL_PREFIX=install-linux
    - cmake --build build --target install
  artifacts:
    paths:
      - install*

# Template for the two GUI-Testing jobs
.guiTestTemplate:
  before_script:
    # sync submodules
    - git submodule sync
    - git submodule update --init
    # add permissions
    - chmod +x ./tests/guitests/run_guitests.sh
  script:
    # xvfb to run a virtual display
    - xvfb-run -a ./tests/guitests/run_guitests.sh
  retry: 1
  artifacts:
    paths:
      - ./gui_tests_web
      - ./gui_tests_junits
      - ./gui_tests_stdout*.txt     
      - ./gui_tests_server_stdout.txt  
      - ./guitests_badge.svg
    reports:
      junit: ./gui_tests_junits/junit*.xml
    name: "guitesting results"
    expire_in: 1 week
    when: always

# GUI Testing Unstable
guiTests:
  stage: guiTestUnstable
  extends: .guiTestTemplate
  tags:
    - Linux
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TAG == null
  needs:
      - linuxBuildDebug
      - job: "testLinux"
        artifacts: false
  dependencies:
    - linuxBuildDebug
  variables:
    DEVTOOLS_DIR: $DEVTOOLS_Linux_Unstable      

# todo, make only one require
guiTestsTag:
  stage: guiTestUnstable
  extends: .guiTestTemplate
  tags:
    - Linux
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TAG =~ /^[1-9][0-9]*-[0-9]+-[0-9]+-.*$/ # unstable tag
  needs:
      - linuxBuildDebug
      - job: "testLinux"
        artifacts: false
  dependencies:
    - linuxBuildDebug
  variables:
    DEVTOOLS_DIR: $DEVTOOLS_Linux_Unstable

# run tests using the binary built before
testWin:
  stage: test
  tags: ["windows", "docker"]
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-win
  needs: ["windowsBuildDebug"]
  extends: 
    - .debugBuildRules
  before_script:
    - '& $env:GTLAB_UPDATE_TOOL up --confirm-command; $null'
  script:
    - $env:path = "$env:GTLAB_DEV_TOOLS\binDebug;$env:path"
    - cd build
    - .\GTlabUnitTest.exe --gtest_output=xml:unittests.xml
  artifacts:
    paths:
      - "build/unittests.xml"
    expire_in: 1 week
    reports:
      junit: build/unittests.xml

testLinux:
  stage: test
  tags: ["linux", "docker"]
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-buster
  needs: ["linuxBuildDebug"]
  extends: 
    - .debugBuildRules
  before_script:
    # update to latest dev tools
    - '"$GTLAB_UPDATE_TOOL" up --confirm-command'
  script:
    - cd build
    - ./GTlabUnitTest --gtest_output=xml:unittests.xml
  variables:
    GIT_SUBMODULE_STRATEGY: "none"
  artifacts:
    paths:
      - "build/unittests.xml"
    expire_in: 1 week
    reports:
      junit: build/unittests.xml  

code-coverage:
  stage: codequality
  tags: ["linux", "docker"]
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-buster
  extends: 
    - .debugBuildRules
  needs: 
    - linuxBuildDebug
  before_script:
    # update to latest dev tools
    - '"$GTLAB_UPDATE_TOOL" up --confirm-command'
  script:
    - cd build
    - ninja test-coverage
    - mv test-coverage ..
  coverage: '/^\s{2}lines\.+:\s+(\d+.\d+\%)/'
  variables:
    GIT_SUBMODULE_STRATEGY: "none"
  artifacts:
    expose_as: 'TestCoverage'
    name: "TestCoverage-$CI_COMMIT_REF_NAME"
    paths:
      - "test-coverage"

valgrind:
  extends: 
    - .debugBuildRules
  needs: ["linuxBuildDebug"]
  stage: test
  tags: ["linux", "docker"]
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-buster
  before_script:
    - apt update -y && apt install -y xvfb
    - '"$GTLAB_UPDATE_TOOL" up --confirm-command'
    - chmod +x ./tests/memcheck/runValgrind.sh
    - chmod +x ./tests/memcheck/post.py
    - python3 -m venv env
    - source env/bin/activate
    - pip3 install valgrind-codequality
  script:
    - export DEVTOOLS=$GTLAB_DEV_TOOLS
    - export GTLAB_LIBRARY_DIR=`pwd`/build
    - xvfb-run -a ./tests/memcheck/runValgrind.sh
    # Convert to codequality format
    - valgrind-codequality --input-file valgrind-report.xml --output-file valgrind.json
  artifacts:
    paths:
      - valgrind-report.xml
    reports:
      codequality: valgrind.json
    expire_in: 1 week
  variables:
    GIT_SUBMODULE_STRATEGY: "none"


# copy templates
.copyTemplate:
  script:
    - .\tests\build\copyHeaders-deployment.bat
    - .\tests\build\copyBin.bat
  tags:
    - Win10

.tagTemplate:
  extends: .copyTemplate
  rules:
    - if: $CI_COMMIT_TAG =~ /^[1-9][0-9]*-[0-9]+-[0-9]+.*$/
  variables:
    RELEASESTATUS: unstable

.package:
  stage: package
  tags: ["docker", "linux"]
  extends: [".releaseBuildRules"]
  image: debian:buster
  script:
    - cp -r install-$toolchain-dbg/* install-$toolchain
    - mv install-$toolchain gtlab-core-$toolchain
    - tar czf gtlab-core-$toolchain.tar.gz gtlab-core-$toolchain
  artifacts:
    name: "gtlab-core-$toolchain"
    paths: ["gtlab-core-$toolchain.tar.gz"]
  variables:
    toolchain: msvc2019
    GIT_STRATEGY: "none"

package-win:
  extends: [".package"]
  needs: ["windowsBuildRelease", "windowsBuildDebug"]
  variables:
    toolchain: msvc2019

package-linux:
  extends: [".package"]
  needs: ["linuxBuildRelease", "linuxBuildDebug"]
  variables:
    toolchain: linux

# code quality
.codingstyle:
  stage: codequality
  extends: .codingStyleTemplate 
  except:
    - tags

cppcheck:
  stage: codequality
  extends: .cppCheckTemplate
  allow_failure: false
  variables:
    GIT_SUBMODULE_STRATEGY: "none"
   
check-license:
   stage: codequality
   tags: ["docker", "linux"]
   needs: []
   image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/buster-dev
   before_script:
    - python3 -m pip install reuse
   script:
    - reuse lint
   variables:
     GIT_SUBMODULE_STRATEGY: "none"
   
pages:
  stage: badges
  extends: .pageTemplate

# badges
badges:
  stage: badges
  extends: .badgeTemplate 
  except:
    - tags
  dependencies: ["windowsBuildDebug", "linuxBuildDebug"]
    
